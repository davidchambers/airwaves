// Generated by CoffeeScript 1.3.3

/*
       ( ( ( ( ( airwaves ) ) ) ) )

    Broadcast on a dedicated frequency
      Copyright 2012, David Chambers
*/


(function() {
  var Channel, airwaves, remove,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  remove = function(array, value) {
    var idx;
    idx = 0;
    while (idx < array.length) {
      if (array[idx] === value) {
        array.splice(idx, 1);
      } else {
        idx += 1;
      }
    }
  };

  Channel = (function() {

    function Channel() {
      this.subscriptions = {};
      this.stack = [];
    }

    Channel.prototype.intercept = function(name, fn) {
      var _base;
      ((_base = this.subscriptions)[name] || (_base[name] = {
        ints: [],
        subs: []
      })).ints.push(fn);
    };

    Channel.prototype.subscribe = function(name, fn) {
      var _base;
      ((_base = this.subscriptions)[name] || (_base[name] = {
        ints: [],
        subs: []
      })).subs.push(fn);
    };

    Channel.prototype.unsubscribe = function(name, fn) {
      if (fn === void 0) {
        delete this.subscriptions[name];
      } else if (Object.prototype.hasOwnProperty.call(this.subscriptions, name)) {
        remove(this.subscriptions[name].ints, fn);
        remove(this.subscriptions[name].subs, fn);
      }
    };

    Channel.prototype.broadcast = function() {
      var args, name, next, queue, sub, wrap;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (__indexOf.call(this.stack, name) >= 0) {
        return;
      }
      if (!Object.prototype.hasOwnProperty.call(this.subscriptions, name)) {
        return;
      }
      this.stack.push(name);
      queue = this.subscriptions[name].ints.slice(0);
      wrap = function(fn) {
        return function() {
          var args, next;
          next = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
          fn.apply(null, args);
          return next.apply(null, args);
        };
      };
      queue.push.apply(queue, (function() {
        var _i, _len, _ref, _results;
        _ref = this.subscriptions[name].subs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sub = _ref[_i];
          _results.push(wrap(sub));
        }
        return _results;
      }).call(this));
      next = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (queue.length) {
          return queue.shift().apply(null, [next].concat(__slice.call(args)));
        }
      };
      try {
        next.apply(null, args);
      } finally {
        this.stack.pop();
      }
    };

    return Channel;

  })();

  airwaves = {
    Channel: Channel
  };

  if (typeof window !== 'undefined') {
    window.airwaves = airwaves;
  } else {
    module.exports = airwaves;
  }

}).call(this);
